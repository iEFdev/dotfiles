#
# ~/.bash_git
#
#
# Description: Separate file for git related stuff
#
# Load it in: ~/.bashrc with
# ------------------------------------------------------------------------------
#   # Load: ~/.bash_git
#   [ -f ~/.bash_git ] && . ~/.bash_git
# ------------------------------------------------------------------------------
#


# Function to get current branch
function git_branch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'; }

# Git branch to PS1 (see .bashrc)
PS1="\[\e[0;32m\]\$(git_branch)\[\e[m\]$PS1";

# Load git-completion
[ -f /usr/local/git/contrib/completion/git-completion.bash ] && . /usr/local/git/contrib/completion/git-completion.bash

# Get shortURL from git.io to clipboard
function gitio()
{
	local _url="$1";
	echo -n $(curl -i http://git.io -F "url=$_url" | grep 'Location' | awk '{ print $2 }') | pbcopy;
}

# Get/generate a .gitignore from: https://www.gitignore.io
# renaming func gi -> gitign
function gitign() { curl -L -s https://www.gitignore.io/api/\$@ ; }

# Function to create archives
# Usage: gitArchive [zip|bz|xz|gz] (xz = default)
function gitArchive ()
{
	# Only use inside a repo.
	[ ! -d '.git' ] && echo -e "\e[1;31m :: \e[m\"`pwd`\" is not a git repository." && return 1;

	local _ext=$1;
	_branch=$(git symbolic-ref --short HEAD 2> /dev/null);
	_repo=$(basename `git rev-parse --show-toplevel`);
	[[ $_branch == 'master' ]] && _append='' || _append="-$_branch";
	[[ -z $_ext ]] && _ext='xz';
	[[ $_ext == 'zip' ]] && _ext='zip' || _ext="$_ext";

	# File name, examples:
	# master:       fooProject_2015-01-01
	# branchname:   fooProject_2015-01-01-branchname
	_output="${_repo}_$(date '+%F')$_append";

	case $_ext in
		# zip
		zip)
			git archive --format=zip -9 -o ../${_output}.$_ext --prefix=${_output}/ $_branch;
			;;

		# tar.bz
		bz)
			git archive --prefix=${_output}/ $_branch | bzip2 > ../${_output}.tar.$_ext;
			;;

		# tar.gz & tar.xz (default = xz)
		# To use xz, add to config: git config --global tar.tar.xz.command "xz -c"
		xz|gz|*)
			git archive --format=tar.$_ext -o ../${_output}.tar.$_ext --prefix=${_output}/ $_branch;
			;;
	esac
}

# Function to list branches by date (bbd)
# https://gist.github.com/ahmedelgabri/2684c4578c3fe5990c5a
#
# Usage: bbd "Sep 14"
#        bbd "Sep"
function bbd()
{
	git reflog --date=local | grep "$1 .* checkout: moving from .* to" | grep -o "[a-zA-Z0-9\-]*$" | sort | uniq;
}

# rbm: A flow function to ReBase and Merge
function rbm()
{
	local _branch="$1";
	[[ -z $_branch ]] && _branch='devel';
	git checkout "$_branch" && git rebase master;
	git checkout master && git merge "$_branch";
}

# http://www.codetunnel.com/tips-for-working-with-git/
function giterate()
{
	echo '';
	for repo in */ ; do
		echo "Repository: $repo";
		git -C $repo "$@";
		echo '';
	done
}

# Sign commit and tag
# Usage: versionBump  v1.2.3
function versionBump()
{
    local _v="$1";
    git commit -a -S -m "Version bump: ${_v}";
    git tag -s "${_v}" -m "${PWD##*/}, ${_v}";
}