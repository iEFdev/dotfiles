#
# ~/.bash.d/functions
#
# Description: Separate file for bash functions and helpers
#

# Bashing
# --------------------
function printfn() { printf '%s\n' "$*"; }


# File & folders
# --------------------

# Make a dir and cd into it (cd "${1}", or cd "$_")
function mkdircd() { mkdir -pv "${1}" && cd "${1}"; }

# Make dirs from file
function mkdirff() { xargs -I {} mkdir -pv "{}" < "${1}"; }
function ytdl.ff() { xargs -I {} youtube-dl "{}" < "${1}"; }

# Misc bak helpers (mbakd, for dirs)
[[ $(uname -s) == 'Darwin' ]] && function mkbakd() { [ -d ${1} ] && ditto -v "${1%/}"{,.bak}; }
function mkbak() { cp -iv "${1}"{,.bak}; }
function mvbak() { mv -iv "${1}"{,.bak}; }

# Get the source of a symlink
# usage: symsrc <symlink>
function symsrc() { ls -l | awk -v l="${1}" -F '-> ' 'match($0, l) {print $2}'; }


# Usage: openBash [<letter(s)>]
# Empty = .bashrc (${1} = 1st letter(s))
function  openBash()
{
    [[ ${1} =~ ^h ]] && open ${_e:-} ~/.bash_history && return;
    [[ ${1} =~ ^i ]] && open ${_e:-} ~/.inputrc && return;
    [ -z ${1} ] && open ${_e:-} ~/.bashrc || \
    for file in $(ls -d ~/.bash.d/*); do
        [[ ${1} == $(basename ${file} | cut -c -1-${#1}) ]] \
        && open ${_e:-} ${file} && break;
    done;
}

# Usage: editBash [<letter(s)>] [vim|nano] (default: ${EDITOR})
# Empty = .bashrc (${1} = 1st letter(s))
function editBash()
{
    local _e="${2:-${EDITOR:-vim}}";
    [[ ${1} =~ ^h ]] && ${_e} ~/.bash_history && return;
    [[ ${1} =~ ^i ]] && ${_e} ~/.inputrc && return;
    [[ ${1} =~ ^n ]] && sudo ${_e} /etc/nanorc && return;
    [ -z ${1} ] && ${_e} ~/.bashrc || \
    for file in $(ls -d ~/.bash.d/*); do
        [[ ${1} == $(basename ${file} | cut -c -1-${#1}) ]] \
        && ${_e} ${file} && break;
    done;
}

# Usage: reBash [<letter(s)>]
# Empty = .bashrc (${1} = 1st letter(s))
function reBash()
{
    [[ ${1} =~ ^h ]] && return;
    [[ ${1} =~ ^i ]] && . ~/.inputrc && return;
    [[ ${1} =~ ^n ]] && . /etc/nanorc && return;
    [ -z ${1} ] && . ~/.bashrc || \
    for file in $(ls -d ~/.bash.d/*); do
        [[ ${1} == $(basename ${file} | cut -c -1-${#1}) ]] \
        && . ${file} && break;
    done;
}


# Delete empty lines in a file
function mtLines() { [ -f "${1}" ] && sed -i '/^$/d' "${1}"; }

# Remove OS X/macOS resource files (.DS_Store, ._files)
#function rmDS { find "${1:-.}" -type f -name .DS_* -delete; }
#function rmDF { find "${1:-.}" -type f -name ._* -delete; }

# Unix way (general)
function rmDS { find "${1:-.}" -type f -name .DS_* -exec rm -v {} \;; }
function rmDF { find "${1:-.}" -type f -name ._* -exec rm -v {} \;; }

# Windows (CRLF) -> Unix (LF)
function mkLF() { find . -name "${1:-*.txt}" -print0 | xargs -0 dos2unix; }

# Search/delete lines in history
if [[ $(uname -s) == 'Darwin' && $(which sed) == '/usr/bin/sed' ]]; then
    # osx version of sed wants an xtra ''
    function delHist() { sed -i '' "/${1}/d" ${HISTFILE}; }
else
    function delHist() { sed -i "/${1}/d" ${HISTFILE}; }
fi

# Search history with grep
function hgrep() { history | grep -v 'grep' | egrep --color=auto "$@"; }

# cd directory of "foo"...
function cd2() { cd $(dirname $(which ${1})); }

# cd directory and list (from Arch Wiki)
function cdl() {
    local _dir="${1:=$HOME}"
    [ -d "${_dir}" ] && cd "${_dir}" >/dev/null && ls || \
    echo "${0}: ${FUNCNAME}: ${_dir}: Directory not found";
}

# rsync folder2folder
function rsyncdir()
{
    # removing trailing "/" and adding our own
    # to make sure there is one, and not end up with "//"
    rsync -avzuch ${3:-} --delete --progress "${1%/}/" "${2%/}/";
}

if [[ $(uname -s) == 'Darwin' ]]; then
    # Remove sticky bit
    function rmxattr()
    {
        local _file="${1}";
        xattr -d $(xattr "${_file}") "${_file}";
    }

    # lsbom - /var/db/receipts
    function lsReceipts() { lsbom -flspf /var/db/receipts/${1}; }
fi

# Reveal program in Finder
[[ $(uname -s) == 'Darwin' ]] && function whichR() { open -R $(which ${1}); }

# Linux 'open'
[[ $(uname -s) == 'Linux' ]] && function open() { xdg-open "$@" > /dev/null 2>&1 ; }

# Search and delete (recursively), using find. $1 = the regexp.
function searchFiles() { find . -type f -name "${1}"; }
function rmFiles() { find . -type f -name "${1}" -delete; }

function adminstall() { sudo install -v -m 0755 -o 0 -g 0 ${@}; }
function badminstall() { sudo install -vb -m 0755 -o 0 -g 0 ${@}; }
function Badminstall() { sudo install -vb -B .$(date '+%Y%m%d').bak -m 0755 -o 0 -g 0 ${@}; }


# Remount (default as rw)
# remount [path] [rw|ro]
function remount()
{
    [[ -n "${1}" && -e "${1}" ]] && mount -o remount,${2:-rw} "${1}" || return 1;
}


# Get this...
# --------------------

# Get site with wget
function wgetSite() { [ -n "${2}" ] && _log="-o ${2}"; wget -ckpr "${1}" ${_log}; }

# Get subdir of site with wget
# -np (--no-parent)
# -nH (--no-host-directories)
function wgetSub() { wget -ckpr -np "${1}"; }
function wget2dir() { wget -ckpr -np -nH "${1}"; }


# Manuals
# --------------------

# To avoid the d d o o u u b b l l e e and spaced letters use: col -b
# Usage: man2txt <foo> [ <path/to/output/file.txt> ]
function man2txt()
{
    [ -z ${2} ] && _file="man_${1}.txt" || _file="${2}";
    man ${1} | col -b > ${_file};
}

# open man-page(s) in its own window. Use: "manx" instead of "man" (OS X)
[[ $(uname -s) == 'Darwin' ]] && function manx() { local i; for i; do open x-man-page://${i}; done; }


# Diff & Patching
# --------------------

# Usage: mkpatch file.ext.orig file.ext [patchname]
function mkpatch() { diff -Naur "${1}" "${2}" > "${3:-$(basename ${2})}.patch"; }

# Apply patch
function patchfile() { patch < "${1}"; }

# Patch a file
# Usage: patch1 patch_file
function patch1() { patch -p0 < "${1}"; }

# version...
# Usage: patch21 filetopatch patch_file
function patch21() { patch "${1}" < "${2}"; }

# Sir Patchalot
function patchalot() { for file in $(ls *.patch); do patch -p0 < ${file}; done; }


# fail2ban
# --------------------
# (help: fail2ban-client -h)
function f2bclient() { sudo fail2ban-client "$@"; }


# GPG
# --------------------
function chksig() { gpg --verify "${1}.sig" "${1}"; }
function chkasc() { gpg --verify "${1}.asc" "${1}"; }
function mksig() { gpg -u 0x${1} -abo "${2}.sig" "${2}"; }
function mkasc() { gpg -u 0x${1} -ab "${2}"; }
function signFile()
{
    [[ ! -f ${2} ]] && { echo "Usage: ${FUNCNAME} <id> <file> [sig]"; return 1; }
    [[ -z ${3} ]] && _out="-o ${2}.asc" || _out='';
    gpg -u "${1}" -sb ${2} file;
}


# Misc & Funsies
# --------------------

# comandline search
function ddg() { firefox https://duckduckgo.com/?q="${1/ /+}"; }

# Fix PDF file - title, author
# Usage: fixPDF "I'm a title" /path/to/pdf.
function fixPDF() {
    local _title="${1}";
    local _file="${2}";
    exiftool -overwrite_original -Author="" -Title="${_title}" "${_file}";
}

# Adminer :: Changing theme.
function chgAdminer() { sudo ln -s /usr/share/webapps/adminer/{themes/${1},adminer}.css; }

if [[ $(uname -s) == 'Darwin' ]]; then
    function spdl() { /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/svtplay-dl -r "${1}"; }
    alias svtplay-dl='/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/svtplay-dl'
fi

# Most freq used commands
# usage: ctop 15
function ctop()
{
    if [ -z ${1} ]; then echo 'Usage: ctop <int>';
    else
        local nr=${1};
        history | awk '{print $2}' | awk 'BEGIN {FS=" | "} {print $1}' | sort | uniq -c | sort -rn | head -${nr};
    fi
}

# Detailed information on an IP address or hostname in bash via http://ipinfo.io:
# https://wiki.archlinux.org/index.php/Bash/Functions#IP_info
# use “/json” incase users-agent set in ~/.curlrc
ipInfo()
{
    local _ip=${1:-$(wget -qO- ifconfig.co)};
    if grep -P "(([1-9]\d{0,2})\.){3}(?2)" 2>/dev/null <<< "${_ip}"; then
        curl "https://ipinfo.io/${_ip}/json" 2>/dev/null | sed 's|"||g';
    else
        ipawk=($(host "${_ip}" | awk '/address/ { print $NF }'));
        curl "https://ipinfo.io/${ipawk[1]}/json" 2>/dev/null | sed 's|"||g';
    fi
    echo;
}

# Weather
function wttr() { curl "wttr.in/${1:-Hometown}"; }
function wttr.v2() { curl "v2.wttr.in/${1:-Hometown}"; }

# Not in Linux
[[ $(uname -s) == 'Darwin' ]] && function whatDisk() { stat -f %Sd "${1:-.}"; }


# ffmpeg
# --------------------

function mk720()
{
    [[ "${1}" == '-w' ]] && _scale='720:-2' && shift 1;
    ffmpeg -y -hide_banner -i "${1}" \
           -vf scale=${_scale:--2:720} \
           -c:v libx264 -crf ${2:-20} \
           -preset:v slow \
           -tune:v film \
           -c:a libfdk_aac -b:a 128k \
           "${1%.*}_720.mp4"
}

function mkgif()
{
    _palette=",split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse";
    [[ ${1} == '-s' ]] && _s="${2}" && shift 2 || _s=;
    [[ ${1} == '-q' ]] && _q="${_palette}" && shift || _q=;

    ffmpeg -i "${1}" -r 10 -vf "scale=${_s:-480}:-1${_q:-}" -tune:v animation "${1%.*}_ffmpeg.gif";
    convert -delay 1 -loop 0 "${1%.*}_ffmpeg.gif" "${1%.*}.gif";
    echo -n '»» removing: ' && rm -v "${1%.*}_ffmpeg.gif";
    gifopt "${1%.*}.gif";
}

function mkMeme() {
    local top_text="${1}";
	local bottom_text="${2}";
    convert "${3}" -font "Impact" -fill white \
    -pointsize "${4:-60}" -stroke black -strokewidth ${5:-2} \
    -gravity north -annotate +0+5 "${top_text}" \
    -gravity south -annotate +0+5 "${bottom_text}" \
    "${3%.*}_meme.${3##*.}" 2> /dev/null;
}
