#
# ~/.bash.d/macports
#
# Description: Separate file for MacPorts
#

# Macports
# --------------------
alias port.out='echo -en "\n--->  " && port outdated'
alias port.sync='sudo port -v sync && port.out && boort.out'
alias port.up='port.sync'
#alias port.up='sudo port -v selfupdate && port.out'
alias port.upgrade='sudo port upgrade'
alias port.upall='sudo port upgrade outdated'
alias port.clean='sudo port clean'

alias lsPorts='port echo installed'
alias lsLeaves='port echo leaves'
alias rmLeaves='sudo port uninstall leaves'
alias lsInactive='port echo inactive'
alias rmInactive='sudo port uninstall inactive'

alias lsDistBuild='ls -Ahl /opt/local/var/macports/{distfiles,build}'
alias rmDistBuild='sudo rm -rvf /opt/local/var/macports/{distfiles,build}/*'

alias setReq='sudo port setrequested'

#  ...and not
function port.upnotall() { sudo port upgrade outdated and not \( "${@}" \); }


# Bootstrap version: curl only (+ dependencies)
# ---------------------------------------------
alias boort='/opt/bootstrap/bin/port'

alias boort.out='echo -en "\n--->  [boort] " && boort outdated'
alias boort.sync='sudo boort -v sync && boort.out'
alias boort.up='boort.sync'
alias boort.upgrade='sudo boort upgrade'
alias boort.upall='sudo boort upgrade outdated'
alias boort.clean='sudo boort clean'

alias lsBoorts='boort echo installed'
alias lsBLeaves='boort echo leaves'
alias rmBLeaves='sudo boort uninstall leaves'
alias lsBInactive='boort echo inactive'
alias rmBInactive='sudo boort uninstall inactive'

alias lsBoortBuild='ls -Ahl /opt/bootstrap/var/macports/{distfiles,build}'
alias rmBoortBuild='sudo rm -rvf /opt/bootstrap/var/macports/{distfiles,build}/*'

alias setBReq='sudo boort setrequested'


# MariaDB
# --------------------
_mariadb='mariadb-10.4'
export PATH="/opt/local/lib/${_mariadb}/bin:${PATH}"

alias mysql.load="sudo port load ${_mariadb}-server"
alias mysql.unload="sudo port unload ${_mariadb}-server"
alias mysql.reload="sudo port reload ${_mariadb}-server && echo :: MariaDB Reloaded"

alias mysql.status='ps aux | grep mysql | grep -v grep'
alias mysql.history='open ~/.mysql_history'

# Fail2Ban
# --------------------
alias fail2ban.start='sudo port load fail2ban'
alias fail2ban.stop='sudo port unload fail2ban'


# For MacPorts GitHub PR template
alias sysXcode="echo \"macOS $(sw_vers -productVersion) $(sw_vers -buildVersion)\"; echo \"Xcode $(xcodebuild -version | awk -v ORS=' ' '{print $NF}')\""


# Portfiles
# --------------------

alias pindex='for d in dev local; do (cd /opt/ports/${d}/ && sudo portindex); done'

# mpchksum <portname> [ <pkgname> ]
function mp.chksum()
{
    local _file="/opt/local/var/macports/distfiles/${1}/${2:-${1}}*";
    local _indent1='           ';          # 11 spaces
    local _indent2='                    '; # 20 spaces (5 tabs)
    (cd $(dirname ${_file});
    echo "# $(basename ${_file})";
    echo -n "checksums${_indent1}";
    for p in rmd160 sha256; do
        openssl dgst -r -${p} $(basename ${_file}) | awk -v p="${p}" '{print p "  " $1 " \\"}';
		echo -n "${_indent2}";
    done;
    stat -x ${_file} | grep 'Size' | awk '{print "size    " $2}';
    echo -e '---\n';)
}

function port.version() { port info "${1}" | head -1; }
function port.maintainers() { port info --maintainers "${1}"; }

function port.cd() { cd $(port dir "${1}"); }
function port.finder() { open -R $(port dir "${1}"); }
alias mp.var='open -R /opt/local/var/macports/'


# Go (port notes Lion)
# --------------------
# go has the following notes:
# go had to be specially patched and built to work on your platform.
#
# It likely won't work out of the box when building other projects,
# so make sure change your environment to use the following variables:
#
GO_EXTLINK_ENABLED="1"
#
# to always force go to use the external gcc or clang linker and
#
GO_LDFLAGS="\"-extldflags=-L/opt/local/lib -Wl,-headerpad_max_install_names -lMacportsLegacySupport\""
#
# to force-link any binary against the legacy support library.
#
# Use exactly the quoting provided here, even if it may look odd, or compilation will fail.
#
# Failure to do so will leave you unable to create binaries that use features not natively
# available on your system, either directly or through a go core dependency.


# Backup
# --------------------
# date -I == date +%F
function mpbak()
{
    _dest_folder="${1:-/path/to/default/folder}";
    (cd /opt;
    for b in ports local; do
       sudo rsync -avz -HAX ./${b}/ ${_dest_folder}/${b}_$(date -I).bak/
    done;)
}
